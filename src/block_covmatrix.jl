struct BlockCovarianceMatrix
	Œ£‚ÇÅ‚ÇÅ::Symmetric{Float64, Matrix{Float64}}
	# Œ£‚ÇÅ‚ÇÇ::Matrix
	Œ£‚ÇÇ‚ÇÅ::Matrix{Float64}
	Œ£‚ÇÇ‚ÇÇ::Symmetric{Float64, Matrix{Float64}}
end

struct CholeskyBlockCovarianceMatrix
	L‚ÇÅ‚ÇÅ::LowerTriangular{Float64, Matrix{Float64}}
	L‚ÇÇ‚ÇÅ::Matrix{Float64}
	L‚ÇÇ‚ÇÇ::LowerTriangular{Float64, Matrix{Float64}}
end

function BlockMatrix_from_cs(cs::CrossSpectralDensity, t‚ÇÅ::Vector{Float64}, t‚ÇÇ::Vector{Float64}, œÉ_X‚ÇÅ¬≤::Vector{Float64}, œÉ_X‚ÇÇ¬≤::Vector{Float64}, f0::Float64, fM::Float64, J::Int64)

	œâ‚±º = Vector{Float64}(undef, J)
	z‚±º = Vector{Float64}(undef, J)

	a_ùìü‚ÇÅ = Vector{Float64}(undef, J)
	a_ùìü‚ÇÇ = Vector{Float64}(undef, J)
	a_ùìí‚ÇÅ‚ÇÇ = Vector{Float64}(undef, J)
	a_œÑ = Vector{Float64}(undef, J)

	approximate_cross_spectral_density!(œâ‚±º, z‚±º, a_ùìü‚ÇÅ, a_ùìü‚ÇÇ, a_ùìí‚ÇÅ‚ÇÇ, a_œÑ, cs, f0, fM, J)

	Œ£‚ÇÅ‚ÇÅ = Matrix{Float64}(undef, length(t‚ÇÅ), length(t‚ÇÅ))
	Œ£‚ÇÇ‚ÇÇ = Matrix{Float64}(undef, length(t‚ÇÇ), length(t‚ÇÇ))
	Œ£‚ÇÇ‚ÇÅ = Matrix{Float64}(undef, length(t‚ÇÇ), length(t‚ÇÅ))

	for (i, t‚ÇÅ·µ¢) in enumerate(t‚ÇÅ)
		for (j, t‚ÇÅ‚±º) in enumerate(t‚ÇÅ)
			Œ£‚ÇÅ‚ÇÅ[i, j] = approximated_covariance(t‚ÇÅ·µ¢ - t‚ÇÅ‚±º, a_ùìü‚ÇÅ, œâ‚±º, z‚±º, J)
			if i == j
				Œ£‚ÇÅ‚ÇÅ[i, j] += œÉ_X‚ÇÅ¬≤[i]
			end
		end
	end

	for (i, t‚ÇÇ·µ¢) in enumerate(t‚ÇÇ)
		for (j, t‚ÇÇ‚±º) in enumerate(t‚ÇÇ)
			Œ£‚ÇÇ‚ÇÇ[i, j] = approximated_covariance(t‚ÇÇ·µ¢ - t‚ÇÇ‚±º, a_ùìü‚ÇÇ, œâ‚±º, z‚±º, J)
			if i == j
				Œ£‚ÇÇ‚ÇÇ[i, j] += œÉ_X‚ÇÇ¬≤[i]
			end
		end
		for (j, t‚ÇÅ‚±º) in enumerate(t‚ÇÅ)
			Œ£‚ÇÇ‚ÇÅ[i, j] = approximated_cross_covariance(t‚ÇÇ·µ¢ - t‚ÇÅ‚±º, a_ùìí‚ÇÅ‚ÇÇ, a_œÑ, œâ‚±º, z‚±º, J)
		end
	end
	return BlockCovarianceMatrix(Symmetric(Œ£‚ÇÅ‚ÇÅ), Œ£‚ÇÇ‚ÇÅ, Symmetric(Œ£‚ÇÇ‚ÇÇ))
end

function sanity_checks(Œ£::BlockCovarianceMatrix)
	Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ = Œ£.Œ£‚ÇÅ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÇ

	# symmetry of Œ£
	@assert isapprox(Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÅ‚ÇÅ') "Œ£‚ÇÅ‚ÇÅ is not symmetric"
	@assert isapprox(Œ£‚ÇÇ‚ÇÇ, Œ£‚ÇÇ‚ÇÇ') "Œ£‚ÇÇ‚ÇÇ is not symmetric"
	# @assert isapprox(Œ£‚ÇÅ‚ÇÇ, Œ£‚ÇÇ‚ÇÅ') "Œ£‚ÇÅ‚ÇÇ is not the transpose of Œ£‚ÇÇ‚ÇÅ"

	# positive definiteness of Œ£
	@assert isposdef(Œ£‚ÇÅ‚ÇÅ) "Œ£‚ÇÅ‚ÇÅ is not positive definite"
	@assert isposdef(Œ£‚ÇÇ‚ÇÇ) "Œ£‚ÇÇ‚ÇÇ is not positive definite"
	# @assert isposdef([Œ£‚ÇÅ‚ÇÅ Œ£‚ÇÅ‚ÇÇ; Œ£‚ÇÇ‚ÇÅ Œ£‚ÇÇ‚ÇÇ]) "Œ£ is not positive definite"
	schur = Symmetric(Œ£‚ÇÇ‚ÇÇ - Œ£‚ÇÇ‚ÇÅ * (Œ£‚ÇÅ‚ÇÅ \ (Œ£‚ÇÇ‚ÇÅ')))
	@assert isposdef(schur) "Schur complement is not positive definite"
	@assert isposdef(inv(schur)) "Inverse of Schur complement is not positive definite"

end

"""
	cholesky(Œ£::BlockCovarianceMatrix)

Compute the Cholesky decomposition of a block covariance matrix Œ£. The matrix is decomposed as:

Œ£ = [L‚ÇÅ‚ÇÅ 0; L‚ÇÇ‚ÇÅ L‚ÇÇ‚ÇÇ] [L‚ÇÅ‚ÇÅ 0; L‚ÇÇ‚ÇÅ L‚ÇÇ‚ÇÇ]'

where L‚ÇÅ‚ÇÅ is the Cholesky decomposition of the upper-left block of Œ£, L‚ÇÇ‚ÇÅ is the lower-left block of Œ£, and L‚ÇÇ‚ÇÇ is the Cholesky decomposition of the Schur complement of Œ£.

# Arguments
- Œ£::BlockCovarianceMatrix: the block covariance matrix to decompose

# Returns
- L‚ÇÅ‚ÇÅ::LowerTriangular{Float64,Array{Float64,2}}: the Cholesky decomposition of the upper-left block of Œ£
- L‚ÇÇ‚ÇÅ::Matrix{Float64}: the lower-left block of Œ£
- L‚ÇÇ‚ÇÇ::LowerTriangular{Float64,Array{Float64,2}}: the Cholesky decomposition of the Schur complement of Œ£
"""
function LinearAlgebra.cholesky(Œ£::BlockCovarianceMatrix)
	Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ = Œ£.Œ£‚ÇÅ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÇ
	L‚ÇÅ‚ÇÅ = cholesky(Œ£‚ÇÅ‚ÇÅ).L
	u = L‚ÇÅ‚ÇÅ \ Œ£‚ÇÇ‚ÇÅ'
	schur = Symmetric(Œ£‚ÇÇ‚ÇÇ - u' * u)
	L‚ÇÇ‚ÇÇ = cholesky(schur).L
	L‚ÇÇ‚ÇÅ = u'
	return L‚ÇÅ‚ÇÅ, L‚ÇÇ‚ÇÅ, L‚ÇÇ‚ÇÇ
end

function get_logdet_triangular(L)
	ldet = 0.0
	for i in eachindex(diag(L))
		ldet += 2log(L[i, i])
	end
	ldet
end

"""
	get_chi2term(L‚ÇÅ‚ÇÅ::LowerTriangular{Float64,Array{Float64,2}}, L‚ÇÇ‚ÇÇ::LowerTriangular{Float64,Array{Float64,2}}, Œ£‚ÇÇ‚ÇÅ::Array{Float64,2}, x‚ÇÅ::Vector{Float64}, x‚ÇÇ::Vector{Float64})
	
"""
function get_chi2term(L‚ÇÅ‚ÇÅ::LowerTriangular{Float64, Array{Float64, 2}}, L‚ÇÇ‚ÇÇ::LowerTriangular{Float64, Array{Float64, 2}}, Œ£‚ÇÇ‚ÇÅ::Array{Float64, 2}, x‚ÇÅ::Vector{Float64}, x‚ÇÇ::Vector{Float64})
	z‚ÇÅ = L‚ÇÅ‚ÇÅ \ x‚ÇÅ
	w = L‚ÇÇ‚ÇÇ \ x‚ÇÇ
	v = L‚ÇÅ‚ÇÅ' \ z‚ÇÅ
	g = Œ£‚ÇÇ‚ÇÅ * v
	u = L‚ÇÇ‚ÇÇ \ g
	z‚ÇÇ = w - u
	return z‚ÇÅ' * z‚ÇÅ + z‚ÇÇ' * z‚ÇÇ
end

function log_likelihood(cs::CrossSpectralDensity, t‚ÇÅ::Vector{Float64}, t‚ÇÇ::Vector{Float64}, x‚ÇÅ::Vector{Float64}, x‚ÇÇ::Vector{Float64}, œÉ¬≤_x‚ÇÅ::Vector{Float64}, œÉ¬≤_x‚ÇÇ::Vector{Float64}, f0::Float64, fM::Float64, J::Int)

	Œ£ = BlockMatrix_from_cs(cs, t‚ÇÅ, t‚ÇÇ, œÉ¬≤_x‚ÇÅ, œÉ¬≤_x‚ÇÇ, f0, fM, J)
	Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ = Œ£.Œ£‚ÇÅ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÇ
	L‚ÇÅ‚ÇÅ = cholesky(Œ£‚ÇÅ‚ÇÅ).L
	u = L‚ÇÅ‚ÇÅ \ Œ£‚ÇÇ‚ÇÅ'
	schur = Symmetric(Œ£‚ÇÇ‚ÇÇ - u' * u)
	L‚ÇÇ‚ÇÇ = cholesky(schur).L

	return -0.5 * get_chi2term(L‚ÇÅ‚ÇÅ, L‚ÇÇ‚ÇÇ, Œ£.Œ£‚ÇÇ‚ÇÅ, x‚ÇÅ, x‚ÇÇ) - 0.5 * (get_logdet_triangular(L‚ÇÅ‚ÇÅ) + get_logdet_triangular(L‚ÇÇ‚ÇÇ))
end