struct BlockCovarianceMatrix
    Œ£‚ÇÅ‚ÇÅ::Matrix
    Œ£‚ÇÅ‚ÇÇ::Matrix
    Œ£‚ÇÇ‚ÇÅ::Matrix
    Œ£‚ÇÇ‚ÇÇ::Matrix
end

struct CholeskyBlockCovarianceMatrix
    L‚ÇÅ‚ÇÅ::Matrix
    L‚ÇÇ‚ÇÅ::Matrix
    L‚ÇÇ‚ÇÇ::Matrix
end

function BlockMatrix_from_cs(cs::CrossSpectralDensity, t, œÉ_X‚ÇÅ¬≤, œÉ_X‚ÇÇ¬≤, f0::Float64, fM::Float64, J::Int64)

	_, œâ‚±º, z‚±º, a_ùìü‚ÇÅ, a_ùìü‚ÇÇ, a_ùìí‚ÇÅ‚ÇÇ, a_œÑ = approximate_cross_spectral_density(cs, f0, fM, J)

	dt = t .- t'
	d = abs.(dt)
	Œ£‚ÇÅ‚ÇÅ = approximated_covariance(d, a_ùìü‚ÇÅ, œâ‚±º, z‚±º, J) + diagm(œÉ_X‚ÇÅ¬≤)
	Œ£‚ÇÇ‚ÇÇ = approximated_covariance(d, a_ùìü‚ÇÇ, œâ‚±º, z‚±º, J) + diagm(œÉ_X‚ÇÇ¬≤)
	Œ£‚ÇÅ‚ÇÇ = approximated_cross_covariance(dt, a_ùìí‚ÇÅ‚ÇÇ, a_œÑ, œâ‚±º, z‚±º, J)
	Œ£‚ÇÇ‚ÇÅ = Œ£‚ÇÅ‚ÇÇ'

	return BlockCovarianceMatrix(Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÅ‚ÇÇ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ)
end

function sanity_checks(Œ£::BlockCovarianceMatrix)
    Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÅ‚ÇÇ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ = Œ£.Œ£‚ÇÅ‚ÇÅ, Œ£.Œ£‚ÇÅ‚ÇÇ, Œ£.Œ£‚ÇÇ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÇ
    
    # symmetry of Œ£
    @assert isapprox(Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÅ‚ÇÅ') "Œ£‚ÇÅ‚ÇÅ is not symmetric"
    @assert isapprox(Œ£‚ÇÇ‚ÇÇ, Œ£‚ÇÇ‚ÇÇ') "Œ£‚ÇÇ‚ÇÇ is not symmetric"
    @assert isapprox(Œ£‚ÇÅ‚ÇÇ, Œ£‚ÇÇ‚ÇÅ') "Œ£‚ÇÅ‚ÇÇ is not the transpose of Œ£‚ÇÇ‚ÇÅ"

    # positive definiteness of Œ£
    @assert isposdef(Œ£‚ÇÅ‚ÇÅ) "Œ£‚ÇÅ‚ÇÅ is not positive definite"
    @assert isposdef(Œ£‚ÇÇ‚ÇÇ) "Œ£‚ÇÇ‚ÇÇ is not positive definite"
    # @assert isposdef([Œ£‚ÇÅ‚ÇÅ Œ£‚ÇÅ‚ÇÇ; Œ£‚ÇÇ‚ÇÅ Œ£‚ÇÇ‚ÇÇ]) "Œ£ is not positive definite"
    schur = Symmetric(Œ£‚ÇÇ‚ÇÇ - (Œ£‚ÇÅ‚ÇÇ' * inv(Œ£‚ÇÅ‚ÇÅ) * Œ£‚ÇÅ‚ÇÇ))
    @assert isposdef(schur) "Schur complement is not positive definite"
    @assert isposdef(inv(schur)) "Inverse of Schur complement is not positive definite"

end

function LinearAlgebra.cholesky(Œ£::BlockCovarianceMatrix)
    Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÅ‚ÇÇ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ = Œ£.Œ£‚ÇÅ‚ÇÅ, Œ£.Œ£‚ÇÅ‚ÇÇ, Œ£.Œ£‚ÇÇ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÇ
    schur = Symmetric(Œ£‚ÇÇ‚ÇÇ - (Œ£‚ÇÅ‚ÇÇ' * inv(Œ£‚ÇÅ‚ÇÅ) * Œ£‚ÇÅ‚ÇÇ))
    L‚ÇÅ‚ÇÅ = cholesky(Œ£‚ÇÅ‚ÇÅ).L
    L‚ÇÇ‚ÇÅ = Œ£‚ÇÇ‚ÇÅ * inv(L‚ÇÅ‚ÇÅ)'
    L‚ÇÇ‚ÇÇ = cholesky(schur).L
    return L‚ÇÅ‚ÇÅ, L‚ÇÇ‚ÇÅ, L‚ÇÇ‚ÇÇ
    #CholeskyBlockCovarianceMatrix(L‚ÇÅ‚ÇÅ, L‚ÇÇ‚ÇÅ, L‚ÇÇ‚ÇÇ)
end
