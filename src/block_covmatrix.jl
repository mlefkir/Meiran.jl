struct BlockCovarianceMatrix
	Œ£‚ÇÅ‚ÇÅ::Symmetric{Float64, Matrix{Float64}}
	# Œ£‚ÇÅ‚ÇÇ::Matrix
	Œ£‚ÇÇ‚ÇÅ::Matrix{Float64}
	Œ£‚ÇÇ‚ÇÇ::Symmetric{Float64, Matrix{Float64}}
end

struct CholeskyBlockCovarianceMatrix
	L‚ÇÅ‚ÇÅ::LowerTriangular{Float64, Matrix{Float64}}
	L‚ÇÇ‚ÇÅ::Matrix{Float64}
	L‚ÇÇ‚ÇÇ::LowerTriangular{Float64, Matrix{Float64}}
end

function BlockMatrix_from_cs(cs::CrossSpectralDensity, t‚ÇÅ::Vector{Float64}, t‚ÇÇ::Vector{Float64}, œÉ_X‚ÇÅ¬≤::Vector{Float64}, œÉ_X‚ÇÇ¬≤::Vector{Float64}, f0::Float64, fM::Float64, J::Int64)

	_, œâ‚±º, z‚±º, a_ùìü‚ÇÅ, a_ùìü‚ÇÇ, a_ùìí‚ÇÅ‚ÇÇ, a_œÑ = approximate_cross_spectral_density(cs, f0, fM, J)

	d‚ÇÅ‚ÇÅ = t‚ÇÅ .- t‚ÇÅ'
	d‚ÇÇ‚ÇÇ = t‚ÇÇ .- t‚ÇÇ'
	d‚ÇÅ‚ÇÇ = t‚ÇÇ .- t‚ÇÅ'
	Œ£‚ÇÅ‚ÇÅ = Symmetric(approximated_covariance(d‚ÇÅ‚ÇÅ, a_ùìü‚ÇÅ, œâ‚±º, z‚±º, J) + diagm(œÉ_X‚ÇÅ¬≤))
	Œ£‚ÇÇ‚ÇÇ = Symmetric(approximated_covariance(d‚ÇÇ‚ÇÇ, a_ùìü‚ÇÇ, œâ‚±º, z‚±º, J) + diagm(œÉ_X‚ÇÇ¬≤))
	Œ£‚ÇÇ‚ÇÅ = approximated_cross_covariance(d‚ÇÅ‚ÇÇ, a_ùìí‚ÇÅ‚ÇÇ, a_œÑ, œâ‚±º, z‚±º, J)
	# Œ£‚ÇÇ‚ÇÅ = Œ£‚ÇÅ‚ÇÇ'

	return BlockCovarianceMatrix(Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ)
end

function sanity_checks(Œ£::BlockCovarianceMatrix)
	Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ = Œ£.Œ£‚ÇÅ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÇ

	# symmetry of Œ£
	@assert isapprox(Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÅ‚ÇÅ') "Œ£‚ÇÅ‚ÇÅ is not symmetric"
	@assert isapprox(Œ£‚ÇÇ‚ÇÇ, Œ£‚ÇÇ‚ÇÇ') "Œ£‚ÇÇ‚ÇÇ is not symmetric"
	# @assert isapprox(Œ£‚ÇÅ‚ÇÇ, Œ£‚ÇÇ‚ÇÅ') "Œ£‚ÇÅ‚ÇÇ is not the transpose of Œ£‚ÇÇ‚ÇÅ"

	# positive definiteness of Œ£
	@assert isposdef(Œ£‚ÇÅ‚ÇÅ) "Œ£‚ÇÅ‚ÇÅ is not positive definite"
	@assert isposdef(Œ£‚ÇÇ‚ÇÇ) "Œ£‚ÇÇ‚ÇÇ is not positive definite"
	# @assert isposdef([Œ£‚ÇÅ‚ÇÅ Œ£‚ÇÅ‚ÇÇ; Œ£‚ÇÇ‚ÇÅ Œ£‚ÇÇ‚ÇÇ]) "Œ£ is not positive definite"
	schur = Symmetric(Œ£‚ÇÇ‚ÇÇ - Œ£‚ÇÇ‚ÇÅ * (Œ£‚ÇÅ‚ÇÅ \ (Œ£‚ÇÇ‚ÇÅ')))
	@assert isposdef(schur) "Schur complement is not positive definite"
	@assert isposdef(inv(schur)) "Inverse of Schur complement is not positive definite"

end

function LinearAlgebra.cholesky(Œ£::BlockCovarianceMatrix)
	Œ£‚ÇÅ‚ÇÅ, Œ£‚ÇÇ‚ÇÅ, Œ£‚ÇÇ‚ÇÇ = Œ£.Œ£‚ÇÅ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÅ, Œ£.Œ£‚ÇÇ‚ÇÇ
	schur = Symmetric(Œ£‚ÇÇ‚ÇÇ - Œ£‚ÇÇ‚ÇÅ * (Œ£‚ÇÅ‚ÇÅ \ (Œ£‚ÇÇ‚ÇÅ')))
	L‚ÇÅ‚ÇÅ = cholesky(Œ£‚ÇÅ‚ÇÅ).L
	L‚ÇÇ‚ÇÅ = Œ£‚ÇÇ‚ÇÅ / L‚ÇÅ‚ÇÅ'
	L‚ÇÇ‚ÇÇ = cholesky(schur).L
	return L‚ÇÅ‚ÇÅ, L‚ÇÇ‚ÇÅ, L‚ÇÇ‚ÇÇ, schur
	#CholeskyBlockCovarianceMatrix(L‚ÇÅ‚ÇÅ, L‚ÇÇ‚ÇÅ, L‚ÇÇ‚ÇÇ)
end


function get_chi2term(L‚ÇÅ‚ÇÅ::LowerTriangular{Float64,Array{Float64,2}}, L‚ÇÇ‚ÇÅ::Array{Float64,2}, L‚ÇÇ‚ÇÇ::LowerTriangular{Float64,Array{Float64,2}}, Œ£‚ÇÇ‚ÇÅ::Array{Float64,2}, x‚ÇÅ::Vector{Float64}, x‚ÇÇ::Vector{Float64})
	z‚ÇÅ = L‚ÇÅ‚ÇÅ \ x‚ÇÅ
	w = L‚ÇÇ‚ÇÇ \ x‚ÇÇ
	v = L‚ÇÅ‚ÇÅ' \ z‚ÇÅ
	g = Œ£‚ÇÇ‚ÇÅ * v
	u = L‚ÇÇ‚ÇÇ \ g
	z‚ÇÇ = w - u
	return z‚ÇÅ' * z‚ÇÅ + z‚ÇÇ' * z‚ÇÇ
end
function log_likelihood(cs::CrossSpectralDensity, t‚ÇÅ::Vector{Float64}, t‚ÇÇ::Vector{Float64}, x‚ÇÅ::Vector{Float64}, x‚ÇÇ::Vector{Float64}, œÉ_X‚ÇÅ¬≤::Vector{Float64}, œÉ_X‚ÇÇ¬≤::Vector{Float64}, f0::Float64, fM::Float64, J::Int)

	Œ£ = BlockMatrix_from_cs(cs, t‚ÇÅ, t‚ÇÇ, œÉ_X‚ÇÅ¬≤, œÉ_X‚ÇÇ¬≤, f0, fM, J)
	L‚ÇÅ‚ÇÅ, L‚ÇÇ‚ÇÅ, L‚ÇÇ‚ÇÇ, schur = cholesky(Œ£)

	return -0.5 * get_chi2term(L‚ÇÅ‚ÇÅ, L‚ÇÇ‚ÇÅ, L‚ÇÇ‚ÇÇ, Œ£.Œ£‚ÇÇ‚ÇÅ, x‚ÇÅ, x‚ÇÇ) - 0.5 * (logdet(Œ£.Œ£‚ÇÅ‚ÇÅ) + logdet(schur))
end